/**
Author: Aman Bhargava
Purpose: To draw bridges based on text files generated by the
  python scripts from my bridge evolver.
Steps:
  1. Get file IO working
  2. Get variables to load properly
  3. Sort out relevant variables
  4. Set up scaling factors (calculate)
  5. Calculate lengths in pixels
  6. Create drawing methods 
      (with offset parameter for left upper corner)
  7. Implement drawing methods
  
Parameter Numbering: 

0 self.paper_thickness = paper_thickness
1 self.height = height #webs + top flange (doesn't include bottom flange)
2 self.flange_width = flange_width
3 self.web_dist = web_dist
4 self.length = length
5 self.dia_dist = dia_dist
6 self.num_flange_layers_top = num_flange_layers_top
7 self.num_flange_layers_bottom = num_flange_layers_bottom
8 self.num_web_layers = num_web_layers
9 self.top_flange_thickness = num_flange_layers_top*paper_thickness
10 self.bottom_flange_thickness = num_flange_layers_bottom*paper_thickness
11 self.web_thickness = num_web_layers*paper_thickness
12 generation_number
  


*/

import java.util.Scanner;
import java.io.FileNotFoundException;


color BGC = color(100, 100, 245);

/* PARAMETERS HOURS */

String fileName = "../../evolve_outputs_species_3000/";
//String fileName = "../../evolve_outputs/";
String testFileName = fileName+"2.txt";
//String fileName = "30.txt";
float mainScaleFactor = 0.8;
float xSectScaleFactor = 1.75;
float splitPoint = 798;
int num_designs = 34;
PImage banana;

/* END PARAMETERS HOURS */

public void setup() {
  String[] lines = loadStrings(testFileName);
  float paper_thickness = float(lines[0]);
  float hei = float(lines[1]);
  float flange_width = float(lines[2]);
  float web_dist = float(lines[3]);
  float len = float(lines[4]);
  float dia_dist = float(lines[5]);
  float num_flange_layers_top = float(lines[6]);
  float num_flange_layers_bottom = float(lines[7]);
  float num_web_layers = float(lines[8]);
  float top_flange_thickness = float(lines[9]);
  float bottom_flange_thickness = float(lines[10]);
  float web_thickness = float(lines[11]);
  float generation_number = float(lines[12]);
  
  banana = loadImage("banana.jpg");
  
  //print(lines);
  
  //drawing 3 separate rectangles
  size(1280, 720);
  stroke(1);
  smooth();
  fill(BGC);
  rect(0, 0, 1280/2, 720/2);
  rect(1280/2, 0, 1280/2, 720/2);
  rect(0, 720/2, 1280, 720/2);
  
  drawMain(lines, mainScaleFactor);
  drawUpLeft(lines, xSectScaleFactor);
  drawUpRight(lines, xSectScaleFactor);
  
  frameRate(12);
  
}
int count = 0;
public void draw(){
  background(255);
  fill(255);
  rect(0, 0, 1280, 720/2);
  fill(BGC);
  String fileNameCount = fileName + str(count) + ".txt";
  String[] lines = loadStrings(fileNameCount);
  
  drawMain(lines, mainScaleFactor);
  drawUpLeft(lines, xSectScaleFactor);
  drawUpRight(lines, xSectScaleFactor);
  
  count ++;
  
  if(count >= num_designs){
    count = num_designs;
    if(Math.random() <0.1){
      count = 0;
    }
  }
  
  fill(55);
  text("Generation Number: "+lines[12], 10, 720/2+20);
  text("Load Bearing Ability: "+lines[13]+" Newtons", 10, 720/2+50);
  
  fill(BGC);
  
}

public void drawMain(String[] lines, float scale){
  float paper_thickness = float(lines[0])*scale;
  float hei = float(lines[1])*scale;
  float flange_width = float(lines[2])*scale;
  float web_dist = float(lines[3])*scale;
  float len = float(lines[4])*scale;
  float dia_dist = float(lines[5])*scale;
  float num_flange_layers_top = float(lines[6])*scale;
  float num_flange_layers_bottom = float(lines[7])*scale;
  float num_web_layers = float(lines[8])*scale;
  float top_flange_thickness = float(lines[9])*scale;
  float bottom_flange_thickness = float(lines[10])*scale;
  float web_thickness = float(lines[11])*scale;
  float generation_number = float(lines[12])*scale;
  
  float off_x = 1280*0.1;
  float off_y = 0.75*720 - hei/2;
  
  //drawing top:
  rect(off_x, off_y, len, top_flange_thickness);
  //drawing web:
  rect(off_x, off_y+top_flange_thickness, len, hei-top_flange_thickness);
  //drawing bottom flange:
  rect(off_x+splitPoint, off_y+hei, len-splitPoint, bottom_flange_thickness);
  //drawing flanges at ends
  rect(off_x, off_y+top_flange_thickness, paper_thickness, hei-top_flange_thickness);
  rect(off_x+len-paper_thickness, off_y+top_flange_thickness, paper_thickness, hei-top_flange_thickness);
  //drawing rest of flanges
  for(int i = 1; i < len/dia_dist; i++){
     rect(off_x+dia_dist*i, off_y+top_flange_thickness, paper_thickness, hei-top_flange_thickness);
  }
  
  float bananaDim = (190/1.44)*scale;//190mm*the scale we're working with.
  image(banana, 1280-bananaDim, 720/2, bananaDim, bananaDim);
  
}

public void drawUpLeft(String[] lines, float scale){
  float paper_thickness = float(lines[0])*scale;
  float hei = float(lines[1])*scale;
  float flange_width = float(lines[2])*scale;
  float web_dist = float(lines[3])*scale;
  float len = float(lines[4])*scale;
  float dia_dist = float(lines[5])*scale;
  float num_flange_layers_top = float(lines[6])*scale;
  float num_flange_layers_bottom = float(lines[7])*scale;
  float num_web_layers = float(lines[8])*scale;
  float top_flange_thickness = float(lines[9])*scale;
  float bottom_flange_thickness = float(lines[10])*scale;
  float web_thickness = float(lines[11])*scale;
  float generation_number = float(lines[12])*scale;
  
  float off_x = 1280*0.15;
  float off_y = 720*0.05;
  
  //drawing top flange
  rect(off_x, off_y, flange_width, top_flange_thickness);
  //drawing webs
  rect(off_x+(flange_width-web_dist)/2-0.5*web_thickness, off_y+top_flange_thickness, web_thickness, hei-top_flange_thickness);
  rect(off_x+flange_width-(flange_width-web_dist)/2-0.5*web_thickness, off_y+top_flange_thickness, web_thickness, hei-top_flange_thickness);
  
  
  
  
}
public void drawUpRight(String[] lines, float scale){
  float paper_thickness = float(lines[0])*scale;
  float hei = float(lines[1])*scale;
  float flange_width = float(lines[2])*scale;
  float web_dist = float(lines[3])*scale;
  float len = float(lines[4])*scale;
  float dia_dist = float(lines[5])*scale;
  float num_flange_layers_top = float(lines[6])*scale;
  float num_flange_layers_bottom = float(lines[7])*scale;
  float num_web_layers = float(lines[8])*scale;
  float top_flange_thickness = float(lines[9])*scale;
  float bottom_flange_thickness = float(lines[10])*scale;
  float web_thickness = float(lines[11])*scale;
  float generation_number = float(lines[12])*scale;
  
  float off_x = 1280/2+1280*0.15;
  float off_y = 720*0.05;
  
  //drawing top flange
  rect(off_x, off_y, flange_width, top_flange_thickness);
  //drawing webs
  rect(off_x+(flange_width-web_dist)/2-0.5*web_thickness, off_y+top_flange_thickness, web_thickness, hei-top_flange_thickness);
  rect(off_x+flange_width-(flange_width-web_dist)/2-0.5*web_thickness, off_y+top_flange_thickness, web_thickness, hei-top_flange_thickness);
  //drawing bottom flange
  rect(off_x, off_y+hei, flange_width, bottom_flange_thickness);
  
  float bananaDim = (190/1.44)*scale;//190mm*the scale we're working with.
  image(banana, 1280-bananaDim, 0, bananaDim, bananaDim);
}
